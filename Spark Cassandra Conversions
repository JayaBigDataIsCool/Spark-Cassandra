sc.cassandraTable[(Int, String, Option[Float])]("keyspace", "table")
  .where("actor == 'johny dep'").select("AAAA","BBBB","CCCC")
  
sc.cassandraTable("keyspace", "table")
  .where("actor == 'johny dep'").select("AAAA","BBBB","CCCC")
  .as((a:Int, b:String, c:Option[Float]) => (a,b,c))
  
case class record((a:Int, b:String, c:Option[Float])
sc.cassandraTable[record]("keyspace", "table")
  .where("actor == 'johny dep'").select("AAAA","BBBB","CCCC")

case class record((a:Int, b:String, c:Option[Float])
sc.cassandraTable("keyspace", "table")
  .where("actor == 'johny dep'").select("AAAA","BBBB","CCCC")
  .as((a:Int, b:String, c:Option[Float]) => new record(a,b,c))
  
Less Efficient:
===============

sc.cassandraTable("keyspace", "table")
  .where("actor == 'johny dep'").select("AAAA","BBBB","CCCC")
  .map(a==> (a.getint("a"), a.getString("b"), a.getFloatOption("c")))


CREATE TABLE killr_video.videos_by_year_title (
    added_year INT,
    title TEXT,
    video_id TIMEUUID,
    added_date TIMESTAMP,
    avg_rating FLOAT,
    description TEXT,
    user_id UUID,
    PRIMARY KEY (added_year, title, video_id)
);
case class record(title: String, added_year: Int, avg_rating: Option[Float], description: String)
val castabrdd = sc.cassandraTable[record]("killr_video","videos_by_year_title").where("added_year = 2009")
val filter = castabrdd.filter(movie => movie.description.contains("dog"))
val output = filter.map( movie => "Title: " + String.format("%1$-26s", movie.title) + "\n" +
                                  "Description: " + movie.description + "\n")
output.collect.foreach(println)

val qry1 = sc.cassandraTable[(String,Option[Float])]("killr_video", "videos_by_year_title").where("added_year=2014")
val qry2 = qry1.select("title", "avg_rating")
val movieCount = qry2.count
val ratedCount = qry2.filter(movie => movie._2.isEmpty).count

printf("Percentage: %.2f%%", 100.0 * ratedCount / movieCount)
